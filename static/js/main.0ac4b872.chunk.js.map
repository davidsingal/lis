{"version":3,"sources":["lib/earth-globe/2_no_clouds_8k.jpg","lib/model-visualizer/DamagedHelmet.gltf","lib/earth-globe/elev_bump_4k.jpg","lib/earth-globe/water_4k.png","lib/earth-globe/galaxy_starfield_4k.png","lib/earth-globe/index.js","tools/GlobeSandbox.js","lib/model-visualizer/index.js","tools/ModelSandbox.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","EarthGlobe","createScenario","width","element","clientWidth","height","clientHeight","renderer","THREE","antialias","setClearColor","setSize","shadowMap","enabled","scene","camera","position","z","ambientLight","add","light","set","appendChild","domElement","geometry","material","map","load","basemapUrl","earthNoClouds","bumpMap","earthBumpElevation","bumpScale","specularMap","earthWater","specular","earthMesh","galaxyGeometry","galaxyMaterial","galaxy","side","galaxyMesh","OrbitControls","update","setElement","setBasemapUrl","resetBasemap","start","frameId","requestAnimationFrame","animate","stop","cancelAnimationFrame","rotation","y","renderScene","window","render","viewerRef","React","createRef","Form","create","name","getFieldDecorator","form","formItemLayout","earthGlobe","handleSubmit","useCallback","e","preventDefault","imageUrl","target","value","reset","useEffect","current","removeChild","gutter","layout","onSubmit","noValidate","autoComplete","Item","rules","required","message","placeholder","type","htmlType","onClick","ref","style","console","log","earthModel","GLTFLoader","gltf","undefined","error","Header","Layout","Content","App","span","color","lineHeight","mode","theme","defaultSelectedKeys","key","to","padding","exact","path","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.0ac4b872.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/2_no_clouds_8k.59704167.jpg\";","module.exports = __webpack_public_path__ + \"static/media/DamagedHelmet.bbe003fc.gltf\";","module.exports = __webpack_public_path__ + \"static/media/elev_bump_4k.f2f91640.jpg\";","module.exports = __webpack_public_path__ + \"static/media/water_4k.44670f84.png\";","module.exports = __webpack_public_path__ + \"static/media/galaxy_starfield_4k.1c46fa10.png\";","import * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\n\nimport earthNoClouds from './2_no_clouds_8k.jpg';\nimport earthBumpElevation from './elev_bump_4k.jpg';\nimport earthWater from './water_4k.png';\nimport galaxy from './galaxy_starfield_4k.png';\n\nclass EarthGlobe {\n  createScenario = () => {\n    const width = this.element.clientWidth;\n    const height = this.element.clientHeight;\n\n    // Renderer\n    this.renderer = new THREE.WebGLRenderer({ antialias: true });\n    this.renderer.setClearColor('#000000');\n    this.renderer.setSize(width, height);\n    this.renderer.shadowMap.enabled = true;\n\n    // Scene\n    this.scene = new THREE.Scene();\n\n    // Camera\n    this.camera = new THREE.PerspectiveCamera(\n      45,\n      width / height,\n      0.01,\n      100\n    );\n    this.camera.position.z = 1.5;\n\n    // Ambient light\n    const ambientLight\t= new THREE.AmbientLight(0x999999);\n    this.scene.add(ambientLight);\n\n    // Directional light\n    var light\t= new THREE.DirectionalLight(0x666666, 1);\n    light.position.set(5, 3, 5);\n    this.scene.add(light);\n\n    // Adding to DOM\n    this.element.appendChild(this.renderer.domElement);\n\n    // Adding object to scene\n    const geometry   = new THREE.SphereGeometry(0.5, 32, 32);\n    const material = this.material = new THREE.MeshPhongMaterial({\n      map: new THREE.TextureLoader().load(this.basemapUrl || earthNoClouds),\n      bumpMap: new THREE.TextureLoader().load(earthBumpElevation),\n      bumpScale: 0.007,\n      specularMap: new THREE.TextureLoader().load(earthWater),\n      specular: new THREE.Color('grey'),\n    });\n\n    this.earthMesh = new THREE.Mesh(geometry, material);\n    this.scene.add(this.earthMesh);\n\n    // Galaxy background\n    const galaxyGeometry  = new THREE.SphereGeometry(100, 32, 32);\n    const galaxyMaterial  = new THREE.MeshBasicMaterial({\n      map: new THREE.TextureLoader().load(galaxy),\n      side: THREE.BackSide,\n    });\n    this.galaxyMesh  = new THREE.Mesh(galaxyGeometry, galaxyMaterial);\n    this.scene.add(this.galaxyMesh);\n\n    // Controls\n    const controls = new OrbitControls(this.camera, this.renderer.domElement);\n    controls.update();\n  }\n\n  setElement = (element) => {\n    this.element = element;\n  }\n\n  setBasemapUrl = (basemapUrl) => {\n    this.material.map = new THREE.TextureLoader().load(basemapUrl);\n  }\n\n  resetBasemap = (basemapUrl) => {\n    this.material.map = new THREE.TextureLoader().load(earthNoClouds);\n  }\n\n  start = (element) => {\n    if (element) this.setElement(element);\n    this.createScenario();\n\n    if (!this.frameId) {\n      this.frameId = requestAnimationFrame(this.animate);\n    }\n  }\n\n  stop = () => {\n    cancelAnimationFrame(this.frameId);\n  }\n\n  animate = () => {\n    this.earthMesh.rotation.y += 0.0005;\n    this.renderScene();\n    this.frameId = window.requestAnimationFrame(this.animate);\n  }\n\n  renderScene = () => {\n    this.renderer.render(this.scene, this.camera);\n  }\n}\n\nexport default EarthGlobe;\n","import React, { useCallback, useEffect } from 'react';\nimport { Button, Col, Form, Input, Row } from 'antd';\nimport EarthGlobe from '../lib/earth-globe';\n\nconst viewerRef = React.createRef();\n\nfunction GlobeSandbox({ form }) {\n  const { getFieldDecorator } = form;\n  const formItemLayout = {\n  };\n\n  let earthGlobe = new EarthGlobe();\n\n  const handleSubmit = useCallback((e) => {\n    e.preventDefault();\n    const { imageUrl } = e.target;\n    earthGlobe.setBasemapUrl(imageUrl.value);\n    e.target.reset();\n  }, [earthGlobe]);\n\n  const resetBasemap = useCallback(() => earthGlobe.resetBasemap(), [earthGlobe]);\n\n  useEffect(() => {\n    earthGlobe.start(viewerRef.current);\n\n    return function cleanup() {\n      earthGlobe.stop();\n      viewerRef.current.removeChild(earthGlobe.renderer.domElement);\n    }\n  }, [earthGlobe]);\n\n  return (\n    <div>\n      <Row gutter={16}>\n      <Col>\n        <Form layout=\"inline\" onSubmit={handleSubmit} noValidate autoComplete=\"off\">\n          <Form.Item {...formItemLayout}>\n            {getFieldDecorator('imageUrl', {\n              rules: [{ required: true, message: 'Please paste a valid URL!' }],\n            })(\n              <Input placeholder=\"Paste your image URL here\" />\n            )}\n          </Form.Item>\n          <Form.Item {...formItemLayout}>\n            <Button type=\"primary\" htmlType=\"submit\">Try!</Button>\n          </Form.Item>\n          <Form.Item>\n            <Button onClick={resetBasemap}>Reset basemap</Button>\n          </Form.Item>\n        </Form>\n      </Col>\n    </Row>\n    <Row gutter={16}>\n      <div\n        ref={viewerRef}\n        style={{ width: '100%', height: '720px' }}\n      />\n    </Row>\n    </div>\n  );\n}\n\nexport default Form.create({ name: 'globe_sandbox' })(GlobeSandbox);\n","import * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\nimport earthModel from './DamagedHelmet.gltf';\n\nconsole.log(earthModel)\n\nclass EarthGlobe {\n  createScenario = () => {\n    const width = this.element.clientWidth;\n    const height = this.element.clientHeight;\n\n    // Renderer\n    this.renderer = new THREE.WebGLRenderer({ antialias: true });\n    this.renderer.setClearColor('#000000');\n    this.renderer.setSize(width, height);\n    this.renderer.shadowMap.enabled = true;\n\n    // Scene\n    const scene = this.scene = new THREE.Scene();\n\n    // Camera\n    this.camera = new THREE.PerspectiveCamera(\n      45,\n      width / height,\n      0.01,\n      100\n    );\n    this.camera.position.z = 5;\n\n    // Ambient light\n    const ambientLight\t= new THREE.AmbientLight(0x999999);\n    this.scene.add(ambientLight);\n\n    // Directional light\n    var light\t= new THREE.DirectionalLight(0x666666, 1);\n    light.position.set(5, 3, 5);\n    this.scene.add(light);\n\n    // Adding to DOM\n    this.element.appendChild(this.renderer.domElement);\n\n    var loader = new GLTFLoader();\n\n    loader.load(earthModel, (gltf) => {\n      console.log(gltf);\n      // scene.add(gltf.scene);\n    }, undefined, function ( error ) {\n\n      console.error( error );\n\n    });\n\n    // Adding object to scene\n    // const geometry   = new THREE.SphereGeometry(0.5, 32, 32);\n    // const material = this.material = new THREE.MeshPhongMaterial({\n    //   map: new THREE.TextureLoader().load(this.basemapUrl || earthNoClouds),\n    //   bumpMap: new THREE.TextureLoader().load(earthBumpElevation),\n    //   bumpScale: 0.007,\n    //   specularMap: new THREE.TextureLoader().load(earthWater),\n    //   specular: new THREE.Color('grey'),\n    // });\n\n    // this.earthMesh = new THREE.Mesh(geometry, material);\n    // this.scene.add(this.earthMesh);\n\n    // // Galaxy background\n    // const galaxyGeometry  = new THREE.SphereGeometry(100, 32, 32);\n    // const galaxyMaterial  = new THREE.MeshBasicMaterial({\n    //   map: new THREE.TextureLoader().load(galaxy),\n    //   side: THREE.BackSide,\n    // });\n    // this.galaxyMesh  = new THREE.Mesh(galaxyGeometry, galaxyMaterial);\n    // this.scene.add(this.galaxyMesh);\n\n    // Controls\n    const controls = new OrbitControls(this.camera, this.renderer.domElement);\n    controls.update();\n  }\n\n  setElement = (element) => {\n    this.element = element;\n  }\n\n  setBasemapUrl = (basemapUrl) => {\n    // this.material.map = new THREE.TextureLoader().load(basemapUrl);\n  }\n\n  resetBasemap = (basemapUrl) => {\n    // this.material.map = new THREE.TextureLoader().load(earthNoClouds);\n  }\n\n  start = (element) => {\n    if (element) this.setElement(element);\n    this.createScenario();\n\n    if (!this.frameId) {\n      this.frameId = requestAnimationFrame(this.animate);\n    }\n  }\n\n  stop = () => {\n    cancelAnimationFrame(this.frameId);\n  }\n\n  animate = () => {\n    // this.earthMesh.rotation.y += 0.0005;\n    this.renderScene();\n    this.frameId = window.requestAnimationFrame(this.animate);\n  }\n\n  renderScene = () => {\n    this.renderer.render(this.scene, this.camera);\n  }\n}\n\nexport default EarthGlobe;\n","import React, { useCallback, useEffect } from 'react';\nimport { Button, Col, Form, Input, Row } from 'antd';\nimport EarthGlobe from '../lib/model-visualizer';\n\nconst viewerRef = React.createRef();\n\nfunction ModelSandbox({ form }) {\n  const { getFieldDecorator } = form;\n  const formItemLayout = {\n  };\n\n  let earthGlobe = new EarthGlobe();\n\n  const handleSubmit = useCallback((e) => {\n    e.preventDefault();\n    const { imageUrl } = e.target;\n    earthGlobe.setBasemapUrl(imageUrl.value);\n    e.target.reset();\n  }, [earthGlobe]);\n\n  const resetBasemap = useCallback(() => earthGlobe.resetBasemap(), [earthGlobe]);\n\n  useEffect(() => {\n    earthGlobe.start(viewerRef.current);\n\n    return function cleanup() {\n      earthGlobe.stop();\n      viewerRef.current.removeChild(earthGlobe.renderer.domElement);\n    }\n  }, [earthGlobe]);\n\n  return (\n    <div>\n      <Row gutter={16}>\n        <Col>\n          <Form layout=\"inline\" onSubmit={handleSubmit} noValidate autoComplete=\"off\">\n            <Form.Item {...formItemLayout}>\n              {getFieldDecorator('imageUrl', {\n                rules: [{ required: true, message: 'Please paste a valid URL!' }],\n              })(\n                <Input placeholder=\"Paste your image URL here\" />\n              )}\n            </Form.Item>\n            <Form.Item {...formItemLayout}>\n              <Button type=\"primary\" htmlType=\"submit\">Try!</Button>\n            </Form.Item>\n            <Form.Item>\n              <Button onClick={resetBasemap}>Reset basemap</Button>\n            </Form.Item>\n          </Form>\n        </Col>\n      </Row>\n      <Row gutter={16}>\n        <div\n          ref={viewerRef}\n          style={{ width: '100%', height: '720px' }}\n        />\n      </Row>\n    </div>\n  );\n}\n\nexport default Form.create({ name: 'globe_sandbox' })(ModelSandbox);\n","import React from 'react';\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n  Link\n} from 'react-router-dom';\nimport { Layout, Menu, Row, Col } from 'antd';\nimport GlobeSandbox from './tools/GlobeSandbox';\nimport ModelSandbox from './tools/ModelSandbox';\nimport './App.css';\n\nconst { Header, Content } = Layout;\n\nfunction App() {\n  return (\n    <Router>\n      <Layout>\n        <Header>\n          <Row>\n            <Col span={12}>\n              <div>\n                <h1 style={{ color: 'white', lineHeight: '64px' }}>LIS</h1>\n              </div>\n            </Col>\n            <Col span={12}>\n              <Menu\n                mode=\"horizontal\"\n                theme=\"dark\"\n                defaultSelectedKeys={['globe']}\n                style={{ lineHeight: '64px' }}\n              >\n                <Menu.Item key=\"globe\">\n                  <Link to=\"/\">Globe</Link>\n                </Menu.Item>\n                <Menu.Item>\n                  <Link to=\"/3d-models\">3D Models</Link>\n                </Menu.Item>\n                <Menu.Item>\n                  <Link to=\"/dem\">DEM</Link>\n                </Menu.Item>\n              </Menu>\n            </Col>\n          </Row>\n        </Header>\n        <Content style={{ padding: '0 50px' }}>\n          <Switch>\n            <Route exact path=\"/\">\n              <GlobeSandbox />\n            </Route>\n            <Route path=\"/3d-models\">\n              <ModelSandbox />\n            </Route>\n            <Route path=\"/dem\">\n              Comming soon...\n            </Route>\n          </Switch>\n        </Content>\n      </Layout>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}