{"version":3,"sources":["lib/earth-globe/2_no_clouds_8k.jpg","lib/earth-globe/elev_bump_4k.jpg","lib/earth-globe/water_4k.png","lib/earth-globe/galaxy_starfield_4k.png","lib/earth-globe/index.js","tools/GlobeSandbox.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","EarthGlobe","createScenario","width","element","clientWidth","height","clientHeight","renderer","THREE","antialias","setClearColor","setSize","shadowMap","enabled","scene","camera","position","z","ambientLight","add","light","set","appendChild","domElement","geometry","material","map","load","basemapUrl","earthNoClouds","bumpMap","earthBumpElevation","bumpScale","specularMap","earthWater","specular","earthMesh","galaxyGeometry","galaxyMaterial","galaxy","side","galaxyMesh","setElement","setBasemapUrl","resetBasemap","start","frameId","requestAnimationFrame","animate","stop","cancelAnimationFrame","rotation","y","renderScene","window","render","viewerRef","React","createRef","GlobeSandbox","earthGlobe","onSubmit","useCallback","e","preventDefault","imageUrl","target","value","reset","useEffect","current","noValidate","autoComplete","TextField","id","label","style","Button","variant","color","type","ref","onClick","App","AppBar","Toolbar","Typography","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a1e3b2a9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/2_no_clouds_8k.59704167.jpg\";","module.exports = __webpack_public_path__ + \"static/media/elev_bump_4k.f2f91640.jpg\";","module.exports = __webpack_public_path__ + \"static/media/water_4k.44670f84.png\";","module.exports = __webpack_public_path__ + \"static/media/galaxy_starfield_4k.1c46fa10.png\";","import * as THREE from 'three';\n\nimport earthNoClouds from './2_no_clouds_8k.jpg';\nimport earthBumpElevation from './elev_bump_4k.jpg';\nimport earthWater from './water_4k.png';\nimport galaxy from './galaxy_starfield_4k.png';\n\nclass EarthGlobe {\n  createScenario = () => {\n    const width = this.element.clientWidth;\n    const height = this.element.clientHeight;\n\n    // Renderer\n    this.renderer = new THREE.WebGLRenderer({ antialias: true });\n    this.renderer.setClearColor('#000000');\n    this.renderer.setSize(width, height);\n    this.renderer.shadowMap.enabled = true;\n\n    // Scene\n    this.scene = new THREE.Scene();\n\n    // Camera\n    this.camera = new THREE.PerspectiveCamera(\n      45,\n      width / height,\n      0.01,\n      100\n    );\n    this.camera.position.z = 1.5;\n\n    // Ambient light\n    const ambientLight\t= new THREE.AmbientLight(0x999999);\n    this.scene.add(ambientLight);\n\n    // Directional light\n    var light\t= new THREE.DirectionalLight(0x666666, 1);\n    light.position.set(5, 3, 5);\n    this.scene.add(light);\n\n    // Adding to DOM\n    this.element.appendChild(this.renderer.domElement);\n\n    // Adding object to scene\n    const geometry   = new THREE.SphereGeometry(0.5, 32, 32);\n    const material = this.material = new THREE.MeshPhongMaterial({\n      map: new THREE.TextureLoader().load(this.basemapUrl || earthNoClouds),\n      bumpMap: new THREE.TextureLoader().load(earthBumpElevation),\n      bumpScale: 0.007,\n      specularMap: new THREE.TextureLoader().load(earthWater),\n      specular: new THREE.Color('grey'),\n    });\n\n    this.earthMesh = new THREE.Mesh(geometry, material);\n    this.scene.add(this.earthMesh);\n\n    // Galaxy background\n    const galaxyGeometry  = new THREE.SphereGeometry(100, 32, 32);\n    const galaxyMaterial  = new THREE.MeshBasicMaterial({\n      map: new THREE.TextureLoader().load(galaxy),\n      side: THREE.BackSide,\n    });\n    this.galaxyMesh  = new THREE.Mesh(galaxyGeometry, galaxyMaterial);\n    this.scene.add(this.galaxyMesh);\n  }\n\n  setElement = (element) => {\n    this.element = element;\n  }\n\n  setBasemapUrl = (basemapUrl) => {\n    this.material.map = new THREE.TextureLoader().load(basemapUrl);\n  }\n\n  resetBasemap = (basemapUrl) => {\n    this.material.map = new THREE.TextureLoader().load(earthNoClouds);\n  }\n\n  start = (element) => {\n    if (element) this.setElement(element);\n    this.createScenario();\n\n    if (!this.frameId) {\n      this.frameId = requestAnimationFrame(this.animate);\n    }\n  }\n\n  stop = () => {\n    cancelAnimationFrame(this.frameId);\n  }\n\n  animate = () => {\n    this.earthMesh.rotation.y += 0.0005;\n    this.renderScene();\n    this.frameId = window.requestAnimationFrame(this.animate);\n  }\n\n  renderScene = () => {\n    this.renderer.render(this.scene, this.camera);\n  }\n}\n\nexport default EarthGlobe;\n","import React, { useCallback, useEffect } from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport EarthGlobe from '../lib/earth-globe';\n\nconst viewerRef = React.createRef();\n\nfunction GlobeSandbox() {\n  let earthGlobe = new EarthGlobe();\n\n  const onSubmit = useCallback((e) => {\n    e.preventDefault();\n    const { imageUrl } = e.target;\n    earthGlobe.setBasemapUrl(imageUrl.value);\n    e.target.reset();\n  }, [earthGlobe]);\n\n  const resetBasemap = useCallback(() => earthGlobe.resetBasemap(), [earthGlobe]);\n\n  useEffect(() => {\n    earthGlobe.start(viewerRef.current);\n  }, [earthGlobe]);\n\n  return (\n    <div>\n      <form onSubmit={onSubmit} noValidate autoComplete=\"off\">\n        <TextField id=\"imageUrl\" label=\"Paste your image URL here\" style={{ width: '400px' }} />\n        <Button variant=\"contained\" color=\"primary\" type=\"submit\">Try!</Button>\n      </form>\n      <div\n        ref={viewerRef}\n        style={{ width: '800px', height: '600px' }}\n      />\n      <Button variant=\"contained\" color=\"primary\" onClick={resetBasemap}>Reset basemap</Button>\n    </div>\n  );\n}\n\nexport default GlobeSandbox;\n","import React from 'react';\nimport { AppBar, Toolbar, Typography }from '@material-ui/core';\nimport GlobeSandbox from './tools/GlobeSandbox';\n\nfunction App() {\n  return (\n    <div>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h6\">\n            LIS\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <GlobeSandbox />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}